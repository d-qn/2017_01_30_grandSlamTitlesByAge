gsub(".*(\\d{4}\\.\\d{2}\\.\\d{2}).*", "\\1", dob)
})
dob <- structure(as.Date(dob, format = "%Y.%m.%d"), names = names(dob))
dob %<>% enframe() %>%
rename(dob = value, player = name)
left_join(titles, dob)
players
dob
dob$dob + (365.25 * 18)
str(dob$dob + (365.25 * 18))
dob
rbind(titles, data.frame(
gs = NA,
date = dob$dob + (365.25 * 18),
player = dob$player
))
titles %<>% left_join(titles, dob)
links <- gsub("overview", "titles-and-finals", players$url)
names(links) <- players$name
link <- links[4]
titles <- do.call(rbind, lapply(links, function(link) {
cat("\nGet list of titles", link)
rtable <- read_html(link) %>%
html_nodes(".mega-table") %>% html_table()
rtable <- rtable[[1]]
years <- rtable[[1]]
gs <- sapply(grandSlams, function(slam) grep(slam, rtable[[3]]))
gs <- sapply(gs, function(ii) if(length(ii) > 0) years[ii])
# remove NULL elements
gs <- gs[!sapply(gs, is.null)]
gs <- do.call(rbind, lapply(names(gs), function(slam) {
data.frame(
gs = as.character(grandSlams[which(names(grandSlams) == slam)]),
date = as.Date(paste0(gs[[slam]], "-", names(grandSlams)[which(names(grandSlams) == slam)]))
)
}))
gs$player <- names(links)[which(links == link)]
gs
}))
rownames(titles) <- NULL
## 2. Get retirement date
links <- gsub("overview", "rankings-history", players$url)
names(links) <- players$name
playingUntil <- sapply(links, function(link) {
cat("\nGet retirement age", link)
rtable <- read_html(link) %>%
html_nodes(".mega-table") %>% html_table()
rtable <- rtable[[1]] %>% select (-Doubles)
rtable$Date <- as.Date(rtable$Date, format = "%Y.%m.%d")
rtable$Date[1]
})
playingUntil <- as.Date(playingUntil, origin = "1970-01-01") %>%
enframe() %>% rename(playingUntil = value)
## 3. Get player DOB
links <- players$url
names(links) <- players$name
dob <- sapply(links, function(url) {
cat("\nGet date of birth", url)
dob <- read_html(url) %>%
html_nodes(".table-birthday")
gsub(".*(\\d{4}\\.\\d{2}\\.\\d{2}).*", "\\1", dob)
})
dob <- structure(as.Date(dob, format = "%Y.%m.%d"), names = names(dob))
dob %<>% enframe() %>%
rename(dob = value, player = name)
## Combine data!
# add date of birth
titles %<>% left_join(titles, dob)
left_join(titles, dob)
titles %>% left_join(dob)
rbind(titles, data.frame(
gs = NA,
date = dob$dob + (365.25 * 18),
player = dob$player
))
as.numeric((titles$date - titles$dob) / 365.25)
titles <- rbind(titles, data.frame(
gs = NA,
date = dob$dob + (365.25 * 18),
player = dob$player
))
# add date of birth
titles %<>% left_join(dob)
titles
titles %<>% left_join(dob)
titles
as.numeric((titles$date - titles$dob) / 365.25)
titles$age <- as.numeric((titles$date - titles$dob) / 365.25)
titles$agef <- floor(titles$age)
titles %<>% arrange(date)
titles
titles$title <- ifelse(is.na(titles$gs), 0, 1)
titles
playingUntil
titles
## 1. Get list of titles
links <- gsub("overview", "titles-and-finals", players$url)
names(links) <- players$name
link <- links[4]
titles <- do.call(rbind, lapply(links, function(link) {
cat("\nGet list of titles", link)
rtable <- read_html(link) %>%
html_nodes(".mega-table") %>% html_table()
rtable <- rtable[[1]]
years <- rtable[[1]]
gs <- sapply(grandSlams, function(slam) grep(slam, rtable[[3]]))
gs <- sapply(gs, function(ii) if(length(ii) > 0) years[ii])
# remove NULL elements
gs <- gs[!sapply(gs, is.null)]
gs <- do.call(rbind, lapply(names(gs), function(slam) {
data.frame(
gs = as.character(grandSlams[which(names(grandSlams) == slam)]),
date = as.Date(paste0(gs[[slam]], "-", names(grandSlams)[which(names(grandSlams) == slam)]))
)
}))
gs$player <- names(links)[which(links == link)]
gs
}))
rownames(titles) <- NULL
## 2. Get retirement date
links <- gsub("overview", "rankings-history", players$url)
names(links) <- players$name
playingUntil <- sapply(links, function(link) {
cat("\nGet retirement age", link)
rtable <- read_html(link) %>%
html_nodes(".mega-table") %>% html_table()
rtable <- rtable[[1]] %>% select (-Doubles)
rtable$Date <- as.Date(rtable$Date, format = "%Y.%m.%d")
rtable$Date[1]
})
playingUntil <- as.Date(playingUntil, origin = "1970-01-01") %>%
enframe() %>% rename(playingUntil = value)
## 3. Get player DOB
links <- players$url
names(links) <- players$name
dob <- sapply(links, function(url) {
cat("\nGet date of birth", url)
dob <- read_html(url) %>%
html_nodes(".table-birthday")
gsub(".*(\\d{4}\\.\\d{2}\\.\\d{2}).*", "\\1", dob)
})
dob <- structure(as.Date(dob, format = "%Y.%m.%d"), names = names(dob))
dob %<>% enframe() %>%
rename(dob = value, player = name)
## Combine data!
# add 18 years old observation
titles <- rbind(titles, data.frame(
gs = NA,
date = dob$dob + (365.25 * 18),
player = dob$player
))
# add end (retirement age or current time)
titles <- rbind(titles, data.frame(
gs = NA,
date = playingUntil$playingUntil,
player = playingUntil$name
))
# add date of birth
titles %<>% left_join(dob)
## r wrangle
titles$age <- as.numeric((titles$date - titles$dob) / 365.25)
titles$agef <- floor(titles$age)
titles %<>% arrange(date)
titles$title <- ifelse(is.na(titles$gs), 0, 1)
titles
titles %<>%
group_by(player) %>%
mutate(count = cumsum(title)) %>%
ungroup()
titles
tail(titles)
## 1. Get list of titles
links <- gsub("overview", "titles-and-finals", players$url)
names(links) <- players$name
link <- links[4]
titles <- do.call(rbind, lapply(links, function(link) {
cat("\nGet list of titles", link)
rtable <- read_html(link) %>%
html_nodes(".mega-table") %>% html_table()
rtable <- rtable[[1]]
years <- rtable[[1]]
gs <- sapply(grandSlams, function(slam) grep(slam, rtable[[3]]))
gs <- sapply(gs, function(ii) if(length(ii) > 0) years[ii])
# remove NULL elements
gs <- gs[!sapply(gs, is.null)]
gs <- do.call(rbind, lapply(names(gs), function(slam) {
data.frame(
gs = as.character(grandSlams[which(names(grandSlams) == slam)]),
date = as.Date(paste0(gs[[slam]], "-", names(grandSlams)[which(names(grandSlams) == slam)]))
)
}))
gs$player <- names(links)[which(links == link)]
gs
}))
rownames(titles) <- NULL
## 2. Get retirement date
links <- gsub("overview", "rankings-history", players$url)
names(links) <- players$name
playingUntil <- sapply(links, function(link) {
cat("\nGet retirement age", link)
rtable <- read_html(link) %>%
html_nodes(".mega-table") %>% html_table()
rtable <- rtable[[1]] %>% select (-Doubles)
rtable$Date <- as.Date(rtable$Date, format = "%Y.%m.%d")
rtable$Date[1]
})
playingUntil <- as.Date(playingUntil, origin = "1970-01-01") %>%
enframe() %>% rename(playingUntil = value)
## 3. Get player DOB
links <- players$url
names(links) <- players$name
dob <- sapply(links, function(url) {
cat("\nGet date of birth", url)
dob <- read_html(url) %>%
html_nodes(".table-birthday")
gsub(".*(\\d{4}\\.\\d{2}\\.\\d{2}).*", "\\1", dob)
})
dob <- structure(as.Date(dob, format = "%Y.%m.%d"), names = names(dob))
dob %<>% enframe() %>%
rename(dob = value, player = name)
## Combine data!
# add 18 years old observation
titles <- rbind(titles, data.frame(
gs = NA,
date = dob$dob + (365.25 * 16),
player = dob$player
))
# add end (retirement age or current time)
titles <- rbind(titles, data.frame(
gs = NA,
date = playingUntil$playingUntil,
player = playingUntil$name
))
# add date of birth
titles %<>% left_join(dob)
## r wrangle
titles$age <- as.numeric((titles$date - titles$dob) / 365.25)
titles$agef <- floor(titles$age)
titles %<>% arrange(date)
titles$title <- ifelse(is.na(titles$gs), 0, 1)
# CumulatQive sum of grand slam titles
titles %<>%
group_by(player) %>%
mutate(count = cumsum(title)) %>%
ungroup()
write.csv(titles, file = "input/titlesByAgeOpenEra.csv", row.names = F)
players
players$match(data$player, players$name)
match(data$player, players$name)
match(titles$player, players$name)
players
players[match(data$player, players$name), "color"]
data <- titles %>% select(-dob)
data$colour <- players[match(data$player, players$name), "color"]
data
titles
data <- titles %>% select(-dob)
data
players[match(data$player, players$name), "color"]
players[match(data$player, players$name), "color"] %>% unlist()
data$colour <- players[match(data$player, players$name), "color"] %>% unlist(use.names = F)
data
ggplot(data = ddd) +
geom_line(aes(age, count, group = player, colour = colour), size = 1, alpha = 1)
ggplot(data = data) +
geom_line(aes(age, count, group = player, colour = colour), size = 1, alpha = 1)
ggplot(data = data) +
geom_step(aes(age, count, group = player, colour = colour), size = 1, alpha = 1)
install.packages("emojifont")
library(emojifont)
load.fontawesome()
set.seed(2016-03-09)
fa <- fontawesome(c('fa-github', 'fa-weibo', 'fa-twitter', 'fa-android', 'fa-coffee'))
d <- data.frame(x=rnorm(20),
y=rnorm(20),
label=sample(fa, 20, replace=T))
ggplot(d, aes(x, y, color=label)) +
geom_text(aes(label=label), family='fontawesome-webfont')+
xlab(NULL)+ylab(NULL)
library(ggplot2)
library(emojifont)
library(scales)
load.fontawesome()
testLabels <- fontawesome(c('fa-windows','fa-linux'))
labs <- data.frame(variable=c("var1", "var2"),
label = fontawesome(c('fa-windows','fa-linux')))
d <- merge(sample, labs, by.x="variable", by.y="variable")
ggplot(d,aes(x=month,y=number,color=variable))+
geom_text(aes(label=label),family='fontawesome-webfont', size=6)+
scale_y_continuous(labels = comma)+
theme(legend.text=element_text(family='fontawesome-webfont'))
fa_font <- tempfile(fileext = ".ttf")
download.file("http://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/fonts/fontawesome-webfont.ttf?v=4.3.0",
destfile = fa_font, method = "curl")
font_import(paths = dirname(fa_font), prompt = FALSE)
fonts()
install.packages("extrafontdb", repos = "http://cran.rstudio.com/")
library(extrafont)
fa_font <- tempfile(fileext = ".ttf")
download.file("http://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/fonts/fontawesome-webfont.ttf?v=4.3.0",
destfile = fa_font, method = "curl")
font_import(paths = dirname(fa_font), prompt = FALSE)
fonts()
load.fontawesome()
set.seed(2016-03-09)
fa <- fontawesome(c('fa-github', 'fa-weibo', 'fa-twitter', 'fa-android', 'fa-coffee'))
d <- data.frame(x=rnorm(20),
y=rnorm(20),
label=sample(fa, 20, replace=T))
ggplot(d, aes(x, y, color=label)) +
geom_text(aes(label=label), family='fontawesome-webfont')+
xlab(NULL)+ylab(NULL)
ggplot(mtcars) +
geom_text(aes(mpg, wt, colour = factor(cyl)),
label = intToUtf8(fa_df[fa_df$codes == "fa-car", "char_int"]),
family = "FontAwesome",
size = 12)
fa_css <- tempfile(fileext = ".css")
download.file("http://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.css", destfile = fa_css)
fa_parsed <- css.parser(fa_css)
load.fontawesome()
set.seed(2016-03-09)
fa <- fontawesome(c('fa-github', 'fa-weibo', 'fa-twitter', 'fa-android', 'fa-coffee'))
d <- data.frame(x=rnorm(20),
y=rnorm(20),
label=sample(fa, 20, replace=T))
ggplot(d, aes(x, y, color=label)) +
geom_text(aes(label=label), family='fontawesome-webfont')+
xlab(NULL)+ylab(NULL)
fontawesome(c('fa-github'))
load.fontawesome()
testLabels <- fontawesome(c('fa-windows','fa-linux'))
testLabels
library(emojifont)
search_emoji('smile')
search_emoji('cup')
search_emoji('trophy')
d <- data.frame(x=x, y=y,
label = sample(c(emoji('cow'), emoji('camel')), 10, replace=TRUE),
type = sample(LETTERS[1:3], 10, replace=TRUE))
library("ggplot2")
ggplot(d, aes(x, y, color=type, label=label)) +
geom_text(family="EmojiOne", size=6)
set.seed(123)
x <- rnorm(10)
set.seed(321)
y <- rnorm(10)
plot(x, y, cex=0)
text(x, y, labels=emoji('cow'), cex=1.5, col='steelblue', family='EmojiOne')
d <- data.frame(x=x, y=y,
label = sample(c(emoji('cow'), emoji('camel')), 10, replace=TRUE),
type = sample(LETTERS[1:3], 10, replace=TRUE))
library("ggplot2")
ggplot(d, aes(x, y, color=type, label=label)) +
geom_text(family="EmojiOne", size=6)
devtools::install_github("GuangchuangYu/emojifont")
library(emojifont)
warnings()
install.packages("emojifont")
install.packages("emojifont")
library(emojifont)
search_emoji('smile')
set.seed(123)
x <- rnorm(10)
set.seed(321)
y <- rnorm(10)
plot(x, y, cex=0)
text(x, y, labels=emoji('cow'), cex=1.5, col='steelblue', family='EmojiOne')
d <- data.frame(x=x, y=y,
label = sample(c(emoji('cow'), emoji('camel')), 10, replace=TRUE),
type = sample(LETTERS[1:3], 10, replace=TRUE))
library("ggplot2")
ggplot(d, aes(x, y, color=type, label=label)) +
geom_text(family="EmojiOne", size=6)
set.seed(2016-03-09)
fa <- fontawesome(c('fa-github', 'fa-weibo', 'fa-twitter', 'fa-android', 'fa-coffee'))
d <- data.frame(x=rnorm(20),
y=rnorm(20),
label=sample(fa, 20, replace=T))
ggplot(d, aes(x, y, color=label, label=label)) +
geom_text(family='fontawesome-webfont', size=6)+
xlab(NULL)+ylab(NULL) +
theme(legend.text=element_text(family='fontawesome-webfont'))
getData <- F
library(rvest)
library(magrittr)
library(dplyr)
library(readr)
library(emojifont)
translation.file <- "input/Grand slam title by age - Sheet1.csv"
grandSlams <- c('Australian Open', 'Wimbledon', 'Roland Garros', 'US Open')
names(grandSlams) <- c('01-29', '07-16', '06-10', '09-10')
players <- c(
'http://www.atpworldtour.com/en/players/roger-federer/f324/overview',
'http://www.atpworldtour.com/en/players/rafael-nadal/n409/overview',
'http://www.atpworldtour.com/en/players/novak-djokovic/d643/overview',
'http://www.atpworldtour.com//en/players/pete-sampras/s402/overview',
'http://www.atpworldtour.com/en/players/stan-wawrinka/w367/overview',
'http://www.atpworldtour.com/en/players/andy-murray/mc10/overview'
)
names(players) <- gsub("^.*players\\/.*\\-(.*)\\/.*\\/overview", "\\1", players)
col.player <- c('#ab3d3f', '#666666', '#333366', '#d4c3aa', '#808080', '#999999')
names(col.player) <- names(players)
if(getData) {
## Get list of titles
links <- gsub("overview", "titles-and-finals", players)
names(links) <- names(players)
link <- links[4]
titles <- do.call(rbind, lapply(links, function(link) {
cat("\n", link)
rtable <- read_html(link) %>%
html_nodes(".mega-table") %>% html_table()
rtable <- rtable[[1]]
years <- rtable[[1]]
gs <- sapply(grandSlams, function(slam) grep(slam, rtable[[3]]))
gs <- sapply(gs, function(ii) if(length(ii) > 0) years[ii])
# remove NULL elements
gs <- gs[!sapply(gs, is.null)]
gs <- do.call(rbind, lapply(names(gs), function(slam) {
data.frame(
gs = as.character(grandSlams[which(names(grandSlams) == slam)]),
date = as.Date(paste0(gs[[slam]], "-", names(grandSlams)[which(names(grandSlams) == slam)]))
)
}))
gs$player <- names(links)[which(links == link)]
gs
}))
rownames(titles) <- NULL
#add current date
titles <- rbind(titles, data.frame(
gs = NA,
date = as.Date(ifelse(names(players) == "sampras", as.Date("2003-08-25"), Sys.Date())),
player = names(players)))
## get player DOB
dob <- sapply(players, function(url) {
cat("\n", url)
dob <- read_html(url) %>%
html_nodes(".table-birthday")
gsub(".*(\\d{4}\\.\\d{2}\\.\\d{2}).*", "\\1", dob)
})
dob <- structure(as.Date(dob, format = "%Y.%m.%d"), names = names(dob))
# add date of birth
titles$dob <- dob[match(titles$player, names(dob))]
# add 16 years old
titles <- rbind(titles, data.frame(
gs = NA,
date = as.Date(dob[match( names(players), names(dob))]) + (365.25 * 18),
player = names(players),
dob = as.Date(dob[match( names(players), names(dob))])
))
## r wrangle
titles$age <- as.numeric((titles$date - titles$dob) / 365.25)
titles$agef <- floor(titles$age)
titles %<>% arrange(date)
titles$title <- ifelse(is.na(titles$gs), 0, 1)
# CumulatQive sum of grand slam titles
titles %<>% group_by(player) %>% mutate(count = cumsum(title)) %>%
ungroup()
write.csv(titles, file = "input/titlesByAge.csv", row.names = F)
} else {
titles <- read_csv("input/titlesByAge.csv")
}
data <- titles %>% select(-dob)
data$colour <- col.player[match(data$player, names(col.player))]
library(ggplot2)
library(scales)
library(swiTheme)
txt <- loadTranslation(translation.file)
lang <- 'EN'
myTheme <- function(base_family, title_family, base_size = 19) {
swi_theme(base_family = base_family, subtitle = base_family, title_family = title_family, base_size = base_size) +
theme(
panel.grid.major.y=element_line(color="#b3b3b3", linetype="dashed", size=0.2),
panel.background = element_rect(fill = "#f2f2f2", color = NA),
plot.background = element_rect(fill = "#f2f2f2", color = NA),
strip.text = element_text(size = 12, hjust = 0, family = base_family, colour = "#595959", face = "bold"),
legend.position = c(.83, .4),
plot.subtitle=element_text(family = base_family, color = '#4A4A4A', size = base_size * 0.9),
plot.caption=element_text(size = base_size * 0.6, margin=margin(t=13), color = '#737373', hjust = 1),
plot.title=element_text(family = title_family, size = base_size * ifelse(lang == 'DE', 0.9, 1.1), margin=margin(b=13)),
plot.margin=unit(c(0.6, 0.45, 0.05, 0.45), "cm")
)
}
ddd <- data
# get translations
ddd$player <- txt[ddd$player, lang]
ddd$gs <- txt[ddd$gs, lang]
gp <- ggplot(data = ddd) +
geom_step(aes(age, count, group = player, colour = colour), size = 1, alpha = 1) +
myTheme(base_family = txt['base.font', lang], title_family = txt['title.font', lang],
base_size = 19 * as.numeric(txt['font.factor', lang])) +
geom_point(
data = ddd %>% filter(!is.na(gs)),
aes(age, count, group = gs, shape = gs, fill = gs), size = 3,
alpha = 0.7, stroke = 0) +
scale_colour_identity() +
scale_x_continuous(name = txt['x.lab', lang], expand = c(0.01,0.08)) +
scale_y_continuous(name = txt['y.lab', lang], breaks = scales::pretty_breaks(n = 10), limits = c(0, 20), expand = c(0,0)) +
scale_shape_manual(values = 21:24, guide = guide_legend(title = NULL))  +
scale_fill_manual(values = c('#3a9736', '#663333', '#333366', '#996699'),
guide = guide_legend(title = NULL)) +
geom_text(data = ddd %>% filter(is.na(gs), age > 20),
aes(age, count, label = player, colour = colour),
nudge_y = 0.29, hjust = 0.9, family = txt['title.font', lang],
size = 3.7 * as.numeric(txt['font.factor', lang])) +
labs(
subtitle = txt['descr', lang],
caption = paste0(txt['source', lang], ": ", txt['source.name', lang], " | @duc_qn | swissinfo.ch "),
title =  txt['main.title', lang])
gp
warnings()
fonts()
